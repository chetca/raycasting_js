//Это типа псевдо-ООП
var map=[ //Это уровень
 [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
[1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1],
[1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1],
[1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1],
[1,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1],
[1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1],
[1,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1],
[1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1],
[1,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1],
[1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1],
[1,1,1,1,1,0,1,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1],
[1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1],
[1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1],
[1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1],
[1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1],
[1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1],
[1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1],
[1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1],
[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
[1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1],
[1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1],
[1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1],
[1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1],
[1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1],
[1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1],
[1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1],
[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
];
var previousTime = Date.now(); //фремя предыдущего кадра
var lag = 0.0; //задержка между временем
var MS_PER_UPDATE = 1000 / 60; //фпс

var rayc = function() {
  var currentTime = Date.now(); //время текущего кадрв
  var elapsedTime = currentTime - previousTime; //разница между временем кадров
  previousTime = currentTime; //при обновлении время текущего кадра становится предыдущим
  lag += elapsedTime; //суммируем лаги

  processInput(); //запуск движения

  //следующий код является по идее костылём от лагов, но он недопилен
  while (lag >= MS_PER_UPDATE) { //пока лагов больше чем фпс(то есть пока тормозит)
    update(); //заглушка которая фиксит тормоза - обновлялка кадров
    lag -= MS_PER_UPDATE; //уменьшаем лаги
  }

  render(lag / MS_PER_UPDATE); //запускаем рендер

  requestAnimationFrame(rayc);//Запускаем отрисовку
  //код спизжен отсбда: http://html5.by/blog/what-is-requestanimationframe/
}

function update(){} //Заглушка

var player={
    x : 46, //Координаты игрока
    y : 7,
    mov : 0, //движение: 1 - вперёд, -1 назад, 0 - стоим на месте(для клавиш)
    dir : 0, //Повороты: 1 - вправо, -1 - влево, 0 - стоим на месте(тоже дял клавиш)
    rot : -1.5, //угол поворота камеры в начале
    speed: 0.05, //скорость движения камеры
    sprint: 0, //бег: 1 - бежим, 0 - идём(придумал Дугар)
    sprintFactor: 2, //коэфициент увеличения движения при беге
    rotSpeed: 2 * Math.PI / 180, //скорость поворотов
    fov : 60 * Math.PI / 180, //Угол обзора(тут косяк с фишаем)
    flatmap : 0,
  };  

function bindKeys(){
  document.onkeydown = function(e){
    e = e || window.event;
    switch(e.keyCode){
      case 65: //A
      case 37: player.dir = 1;//стрелка влево
        break;
      case 87: //W
      case 38: player.mov = 1; //стрелка вверх
        break;
      case 68: //D
      case 39: player.dir = -1;//стрелка вправо
        break;
      case 83: //S
      case 40: player.mov = -1;//стрелка вниз
        break;
      case 16: player.sprint = 1; //Shift
      break;
      case 77: player.flatmap = (player.flatmap) ? 0 : 1;
      break;//Прикольная фича для показывания плоской карты
    }
    
  };
  document.onkeyup = function(e){
    e = e || window.event;
    switch(e.keyCode){
      case 65: //A
      case 37: //стрелка влево
      case 68: //D
      case 39: //стрелка вправо
        player.dir = 0;
        break;
      case 87: //W
      case 38: //стрелка вверх
      case 83: //S
      case 40: //стрелка вниз
        player.mov = 0;
        break;  
      case 16: //Shift
        player.sprint = 0; 
        break;
    }
  };
}

function processInput(){
  var step = player.mov * player.speed * (player.sprint +1) * player.sprintFactor; //шаг вперёд или назад
  var rotStep = player.dir * player.rotSpeed; //поворот при шаге
  
  player.rot = addRotToAngle(rotStep, player.rot); //И получаем направление куда направлена камера

  var xNew = player.x + step * Math.cos(player.rot); //расчитываем новые координаты игрока
  var yNew = player.y - step * Math.sin(player.rot); 
  
  
  if (!(hitWall(xNew, yNew))){  //Если тут не стенка
    player.x = xNew;  //Делаем шаг туда
    player.y = yNew;
  }
}

function addRotToAngle(rot, angle){ //Функция нормализирования угла(Этого не хватало в сишной версии движка)
  //Это что-то типа (pos+dir) в сишной версии
  var newAngle = angle + rot; //Итоговый угол получается из суммы угла начального и угла полученого после поворота
  //Если получившийся угол:
  if (newAngle < 0){ //отрицательным, то
    return newAngle + 360 * Math.PI /180; //поворачиваем его на 2*Pi по часовой
  }   
  if (newAngle > 360 * Math.PI / 180){ //положительным, то
    return newAngle - 360 * Math.PI /180; //поворачиваем его на 2*Pi против часовой
  }
  return newAngle;
}

function hitWall(x, y) { //проверка на попадание в стену(как в js перегружать функции???????????)
  /*
  if (x < 0 || x >= map[0].length || y < 0 || y >= map.length){
    return true;
  }
  */
  return map[Math.floor(y)][Math.floor(x)] != 0;//честно говоря, я и сам не понимаю как оно работает
}

function render(){ //Рендеринг состоит из трёх шагов:
  drawBackground(); //Рисуем пол и потолок
  castRays(); //Бросаем лучи и отрисовываем стены
  if(player.flatmap) drawMap(); //Отрисовываем плоскую карту 
}

function drawBackground(){  
  ctx.clearRect(0, 0, canvas.width, canvas.height); //потолок 
  ctx.fillStyle = '#E3E3E1'; //цвет извести
  ctx.fillRect(0, 0, canvas.width, canvas.height /2); //пол
  ctx.fillStyle = '#858585'; //Цвет линолеума 
  ctx.fillRect(0, canvas.height /2, canvas.width, canvas.height /2); //поправка на углы
}

function castRays() { //самая главная функция во всём движке - бросание лучей
  var angleBetweenRays = ((player.fov*180/Math.PI) / canvas.width)*Math.PI /180; //делим угол обзора на маленьки кусочки - углы куда будут бросаться лучи
  var dist;   //переменная расстояния до препятствия
  var angle = addRotToAngle(player.fov /2, player.rot); //(pos+dir+plane)
  for (var i = 0; i < canvas.width;i++){
    castSingleRay(angle, i); //Бросаем по одному лучу на каждый кусочек экрана
    angle = addRotToAngle(-angleBetweenRays, angle);//и переходим на следующий кусочек
  }
}

function castSingleRay(angle, row) { //бросание лучей по одному
  var facingRight = (angle < 90* Math.PI /180 || angle > 270 * Math.PI /180); //1 и 4 четверть(наклон)
  var facingUp = (angle < 180 * Math.PI /180); //1 и 2 четверть(наклон)
  
  var x = 0; //координаты камеры с учётом наклона
  var y = 0;
  var dX = 0; //коэфициент движения с учётом наклона(+ или -)
  var dY = 0;
  var xMap = 0; //координаты на карте с учётом наклона
  var yMap = 0;
  var dist = 0; //расстояние до препятствия
  var img = 0; //номер текстуры
  var offset = 0; //коэффициент смещения
  var slope =  1 / (Math.sin(-angle) / Math.cos(-angle)); //сам наклон
  //Для экономии рессурсов вычисления сделаем целочисленными
  //По горизонтали:
  y = facingUp ? Math.floor(player.y) : Math.ceil(player.y); //В зависимости от четверти делаем больше или меньше
  x = player.x + (y -player.y) *slope; //Аналогичная хуйня только с наклоном
  
  dY = facingUp ? -1 : 1; //В зависимости от четверти опять же
  dX = dY * slope; //В зависимости от наклона
  while (x >= 0 && x < map[0].length && y >= 0 && y < map.length)//Двигаемся по карте уровня
  {
    yMap = Math.floor(y + (facingUp ? -1 : 0));
    xMap = Math.floor(x);
    if (hitWall(xMap, yMap)){ //DDA в здании!
      dist = Math.abs((player.x - x) / Math.cos(angle)); //Спасайте дистанции
      offset = x % 1; //Слушайте дядю Хованского
      img = map[yMap][xMap]; //Я тебе зуб даю, бля буду гангстером! 
      break;
    }
    x += dX; //сдвигаемся на коэфициент
    y += dY;
  }
  
  //По вертикали(почти тоже самое)
  var slope = (Math.sin(-angle) / Math.cos(-angle)); //наклон
  x = facingRight ? Math.ceil(player.x) : Math.floor(player.x);
  y = player.y + (x -player.x) *slope;
  dX = facingRight ? 1 : -1;
  dY = dX * slope;
  while (x >= 0 && x < map[0].length && y >= 0 && y < map.length)
  {
    xMap = Math.floor(x + (facingRight ? 0 : -1));
    yMap = Math.floor(y);
    if (hitWall(xMap, yMap)){
      break;
    }
    x += dX;
    y += dY;
  }
  if (dist == 0 || dist > Math.abs((player.y - y) / Math.sin(angle))){
    dist = Math.abs((player.y - y) / Math.sin(angle));
    img = map[yMap][xMap];
    offset = y %1;
  }
  dist = dist * Math.cos(player.rot - angle); //делаем поправку на рыбий глаз
  drawRay(dist, row, offset, img); //И отрисовываем
  
}

function drawRay(dist, x, offset, img) {   //отрисовываем то что получилось 
  var distanceProjectionPlane = (canvas.width /2) / Math.tan((player.fov /2)); //расстояние до плоскости проекции(читать "до экрана")
  var sliceHeight = 1 / dist * distanceProjectionPlane; //Высота данной текстуры
  //выбор текстур
  switch(img){
    case 1: ctx.drawImage(document.getElementById('wall'), offset*63, 0, 1, 64, x, (canvas.height /2) - (sliceHeight /2), 1, sliceHeight);
      break; //рисуем текстуру с учётом всех наклонов
    case 2: //остальные текстур
      break;
  }

}

function drawMap(){ //функция отрисовки маленькой плоской копии карты
  //ну я думаю, тут очевидно всё - просто на белом прямоугольнике чёрным рисуем стенки и красной точкой обозначаем положение камеры
  ctx.clearRect(0, 0, map[0].length*5, map.length*5);
  ctx.fillStyle = 'rgb(255, 0, 0)';
  ctx.fillRect(player.x*5 -1, player.y*5 -1, 2, 2);
  
  for (var y=0; y<map.length; y++){
    for (var x=0; x<map[y].length; x++){
      if (map[y][x] > 0){
        ctx.fillStyle = 'rgb(0, 0, 0)';
        ctx.fillRect(x*5, y*5, 5, 5);
      }   
    }
  }

}
//насчёт этого сам не понял, но без них не канает
bindKeys();
requestAnimationFrame(rayc);